Principles
-- Have a vision, sharpen it, iterate it
-- refactor your code, make it audrey lorde readable
-- Goal is to get a dollar from a stranger / job / have fun
-- "hit the user on the head" UI Features
-- Bic lighter is inspiration (the button getting colorful is sparks, led turning on is flame)
-- #1 is changeability
-- don't add recording yet! The simplest thing just plays. Keep it simple. Make a demo that works good.
-- code is like simplifying a philosophy paper to make it air tight and understandable
-- test current data structure before iterating to more complicated modes. IT IS THE KEY OF THIS APP!!!! It should be fucking easy to change this thing.
-- computed values for how modes influence data transofmation file. Should have to update two files to add a new feature (the feature itself and central data file that takes care of the rest)
-- is complexity in the selectors or in the reducers.
-- software is like glass, and once you set your foundations in glass, you can't go drilling holes at the bottom.

FINAL ITEMS
Doing:
-- create curtain


FEATURES:
-- Curtain (will need a slice)
-- Screen Lock
-- Introduction w/ tutorial (graphics can be used for portfolio) / persist data to show only once?
-- question mark
-- Etsy shop
-- Unify data struc
-- cache if user has seen intro.

BUGS
-- Fix frozen spinner on render
-- fix styles of purchase tile
-- transition bugs Modes
-- make scanning tile larger

BEFORE REVIEW
-- delete console logs
-- clean up code for github
-- make logo and descriptions

AFTER MVP
UI
--  click shut when screen is locked with animation that turns screen B/W
--feedback on disconnect in UI
-- option to cancel connection if it is taking too long (i always wished apple had this.)
-- can animate locked screen with a light color. Accidently figured out the style
-- select and animate certain parts of the light strip.
-- animate gradient top of screen
-- add more icons (ICON ABOVE EACH MODE)
-- purchase animation and link
-- vibration
--create a background mode, can swipe up?? to lock app in place so can have it in pocket and it is undisruptive.
-- wonder if I should jsut get rid of backgrouns operation if it is so subpar, this is a big blow...
-- way to save and edit saved shows
-- halo light responds to motion

-- make gesture handler size of entire screen
-- welcome greeting
--transform errors into satisfying and actionable UI feedback
-- cached data for the selectors
-- centralize all written content
-- Enhance main button

FUNCTIONALITY
--file saving
--smoothing functions
-- multi-BT functionality
-- color modes.
-- Background mode options (replay, stick on one color, default mode) KISS THO
-- dynamic data sending and parsing (use different sensors)

DATA ORGANIZATION
-- make a decision about consistent data structures.
-- computed values for how modes influence data transofmation file. Should have to update two files to add a new feature (the feature itself and central data file that takes care of the rest)
-- Each variable should be defined in the same way and have same data structure
-- centralize string variables - mode, bluetooth, purchase in list item and where component is called.
-- modular selection queries
-- continue to globalize styles
-- don't unpack readSensors until needed, so cluttered.

LT NOTES
-- Micro concert will need to randomly generated UU ID, because there will be issues with connecting multiple if they have the same. Or at least I am anticipating. This could also become an issue if I want to remember devices and the UU ID changes and I can't remember them.
-- it would be awesome if I could press make a slice and it would open all the files I needed, could fill out a form and do it in muy project
-- // could I use calculated fields to centralize all of this action? in slices. how will i make tshare changeable?
-- could cancelAnimation be causing probs
-- if background is impossible, could lock screen or do pocket mode and somehow keep screen on, just so it is easier to use,
-- task identifier can extend background over 15 minutes https://developer.apple.com/documentation/foundation/nsurlsessiontask/1411231-taskidentifier
-- may not be able to get this thing to run in background, atleast on iOS. Could interval large data transfers that can run on for awhile...
-- the curtainState file is a solution to modeState, could have one variable in the state, then use reducers to move through the data sets in the state files.
-- I wonder if typeScript will solve problems with variables and multiple sources of truth
